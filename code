import os
import rclpy
from rclpy.node import Node
from visualization_msgs.msg import Marker, MarkerArray
from geometry_msgs.msg import Point
from bosdyn.api.graph_nav import map_pb2
from bosdyn.client.math_helpers import SE3Pose


class GraphNavVisualizer(Node):
    def __init__(self, map_path):
        super().__init__('graph_nav_visualizer')

        # Load GraphNav map
        self.map_path = map_path
        self.current_graph, self.current_waypoints, self.current_waypoint_snapshots, _, _, _ = self.load_map(map_path)

        # Publisher for markers
        self.marker_pub = self.create_publisher(MarkerArray, '/graph_nav_map_markers', 10)
        self.get_logger().info(f"Loaded GraphNav map with {len(self.current_graph.waypoints)} waypoints")

        # Timer to periodically publish markers
        self.create_timer(1.0, self.publish_graph_nav_map)

    def load_map(self, path):
        """Load the GraphNav map from the specified path."""
        with open(os.path.join(path, 'graph'), 'rb') as graph_file:
            data = graph_file.read()
            current_graph = map_pb2.Graph()
            current_graph.ParseFromString(data)

            current_waypoints = {}
            current_waypoint_snapshots = {}

            for waypoint in current_graph.waypoints:
                current_waypoints[waypoint.id] = waypoint
                if waypoint.snapshot_id:
                    snapshot_path = os.path.join(path, 'waypoint_snapshots', waypoint.snapshot_id)
                    if os.path.exists(snapshot_path):
                        with open(snapshot_path, 'rb') as snapshot_file:
                            waypoint_snapshot = map_pb2.WaypointSnapshot()
                            waypoint_snapshot.ParseFromString(snapshot_file.read())
                            current_waypoint_snapshots[waypoint_snapshot.id] = waypoint_snapshot

            return current_graph, current_waypoints, current_waypoint_snapshots, None, None, None

    def publish_graph_nav_map(self):
        """Publish the GraphNav map as a MarkerArray."""
        marker_array = MarkerArray()

        # Add waypoints as markers
        for i, waypoint in enumerate(self.current_graph.waypoints):
            marker = Marker()
            marker.header.frame_id = "map"
            marker.header.stamp = self.get_clock().now().to_msg()
            marker.ns = "waypoints"
            marker.id = i
            marker.type = Marker.SPHERE
            marker.action = Marker.ADD
            marker.pose.position.x = waypoint.pose.x
            marker.pose.position.y = waypoint.pose.y
            marker.pose.position.z = waypoint.pose.z
            marker.scale.x = 0.2
            marker.scale.y = 0.2
            marker.scale.z = 0.2
            marker.color.r = 0.0
            marker.color.g = 1.0
            marker.color.b = 0.0
            marker.color.a = 1.0
            marker_array.markers.append(marker)

        # Add edges as lines
        for edge in self.current_graph.edges:
            if edge.id.from_waypoint in self.current_waypoints and edge.id.to_waypoint in self.current_waypoints:
                from_waypoint = self.current_waypoints[edge.id.from_waypoint]
                to_waypoint = self.current_waypoints[edge.id.to_waypoint]

                marker = Marker()
                marker.header.frame_id = "map"
                marker.header.stamp = self.get_clock().now().to_msg()
                marker.ns = "edges"
                marker.id = len(marker_array.markers)
                marker.type = Marker.LINE_STRIP
                marker.action = Marker.ADD
                marker.scale.x = 0.05
                marker.color.r = 1.0
                marker.color.g = 0.0
                marker.color.b = 0.0
                marker.color.a = 1.0

                point1 = Point(x=from_waypoint.pose.x, y=from_waypoint.pose.y, z=from_waypoint.pose.z)
                point2 = Point(x=to_waypoint.pose.x, y=to_waypoint.pose.y, z=to_waypoint.pose.z)
                marker.points.append(point1)
                marker.points.append(point2)

                marker_array.markers.append(marker)

        self.marker_pub.publish(marker_array)


def main(args=None):
    rclpy.init(args=args)

    map_path = '/path/to/graphnav/map'  # Update with the path to your local GraphNav map
    node = GraphNavVisualizer(map_path)

    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        rclpy.shutdown()


if __name__ == '__main__':
    main()
